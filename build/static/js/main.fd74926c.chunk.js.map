{"version":3,"sources":["store/helper.js","store/config/config.js","store/config/connect.js","components/nav/Nav.js","components/sidebar/Sidebar.js","components/charts/ChartOne.js","components/home/Home.js","router/Router.js","App.js","store/config/middleware.js","store/config/provider.js","serviceWorker.js","index.js"],"names":["helperStore","helper","theme","helperReducer","state","action","type","payload","initialState","store","dispatch","Context","createContext","Connect","mapStateToProps","Component","props","Consumer","storeProps","obj","mapStateToPropsMock","Fragment","className","onClick","role","aria-label","setToggled","isToggled","aria-expanded","aria-hidden","to","href","src","alt","width","height","aria-orientation","ExampleChart","chartType","spreadSheetUrl","options","hAxis","format","vAxis","rootProps","useState","Router","path","exact","component","Home","App","middleware","next","Store","useReducer","helperState","helperDispatch","trigglerDispatchs","dispatchs","i","length","combinedReducers","Provider","value","children","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fd74926c.chunk.js","sourcesContent":["export const helperStore = {\r\n  helper: {\r\n    theme: 'light',\r\n  }\r\n};\r\n\r\nexport const SET_THEME = \"SET_THEME\";\r\n\r\nconst helperReducer = (state = helperStore, action) => {\r\n  switch (action.type) {\r\n    case SET_THEME:\r\n      return {\r\n        helper: {\r\n          ...state.helper,\r\n          theme: action.payload,\r\n        }\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const SetTheme = theme => {\r\n  return {\r\n    type: SET_THEME,\r\n    payload: theme\r\n  };\r\n};\r\n\r\nexport default helperReducer;","import { createContext } from \"react\";\r\nimport { helperStore } from \"../helper\";\r\n\r\nexport const initialState = {\r\n  store: {\r\n    ...helperStore,\r\n  },\r\n  dispatch: () => { }\r\n};\r\n\r\nconst Context = createContext(initialState);\r\n\r\nexport default Context;\r\n","import React from \"react\";\r\nimport Context from \"./config\";\r\n\r\nconst mapStateToPropsMock = (obj, props) => ({\r\n  ...props\r\n});\r\n\r\nconst Connect = mapStateToProps => Component => {\r\n  return props => (\r\n    <Context.Consumer>\r\n      {({ dispatch, store }) => {\r\n        const storeProps = mapStateToProps\r\n          ? { ...mapStateToProps(store, props) }\r\n          : { ...mapStateToPropsMock(store, props) };\r\n        return <Component {...storeProps} dispatch={dispatch} />;\r\n      }}\r\n    </Context.Consumer>\r\n  );\r\n};\r\n\r\nexport default Connect;\r\n","import React from 'react'\nimport { Link } from \"react-router-dom\"\nimport { SetTheme } from '../../store/helper';\nimport Connect from '../../store/config/connect';\nimport 'bulma/css/bulma.css'\nimport './nav.css'\n\nconst Nav = props => {\n\n    const toggleTheme = () => {\n        props.dispatch(SetTheme(props.theme === 'light' ? 'dark' : 'light'));\n    }\n\n    return (\n        <React.Fragment>\n            <div className={`${props.theme === 'light' ? '' : 'change-colour'} theme-button `}>\n                <button className=\"button is-link \" onClick={toggleTheme}>{`${props.theme === 'light' ? 'Dark Theme' : 'Light Theme'}`}</button>\n            </div>\n            <nav className={`navbar flex-column ${props.theme === 'light' ? '' : 'change-colour'}`} role=\"navigation\" aria-label=\"main navigation\">\n                <div className=\"navbar-brand\">\n                    <button\n                        onClick={() => { props.setToggled(!props.isToggled); }} type=\"button\"\n                        className={`navbar-burger ${props.isToggled ? 'is-active' : ''}`} aria-label=\"menu\" aria-expanded={props.isToggled}>\n                        <span aria-hidden=\"true\"></span>\n                        <span aria-hidden=\"true\"></span>\n                        <span aria-hidden=\"true\"></span>\n                    </button>\n\n                    <Link to=\"/\">\n                        <div className=\"navbar-item\" href=\"/\">\n                            <img src=\"https://placehold.co/65x44\" alt=\"\" width=\"65\" height=\"44\" />\n                        </div>\n                    </Link>\n                </div>\n            </nav>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = ({ helper }, props) => {\n    return {\n        ...props,\n        ...helper\n    };\n};\n\nexport default Connect(mapStateToProps)(Nav);","import React from 'react'\nimport { Link } from \"react-router-dom\"\nimport Connect from '../../store/config/connect';\nimport './sidebar.css'\n\nconst Sidebar = props => {\n\n    return (\n        <div className={`sidebar ${props.isToggled ? 'is-active' : ''} ${props.theme === 'light' ? '' : 'change-colour'}`} role=\"tablist\" aria-orientation=\"vertical\">\n            <div className={`flex-column sidebar-menu `} role=\"tablist\" aria-orientation=\"vertical\">\n                <div className=\"d-flex account w-100\">\n                    <div className=\"account-badge d-flex justify-content-center align-items-center\">\n                        <span>JS</span>\n                    </div>\n                    <div className=\"account-cta d-flex justify-content-center flex-column align-items-left\">\n                        <span className=\"username\">John Smith</span>\n                        <div>\n                            <Link to=\"#\">View profile</Link>\n                            <span className=\"divider\">|</span>\n                            <Link to=\"#\">Logout</Link>\n                        </div>\n                    </div>\n                </div>\n                <ul className=\"nav-menu\">\n                    <li className=\" d-flex align-items-center\">Menu 1</li>\n                    <li className=\" d-flex align-items-center\">Menu 2</li>\n                </ul>\n            </div>\n        </div>\n    )\n}\nconst mapStateToProps = ({ helper }, props) => {\n    return {\n        ...props,\n        ...helper\n    };\n};\n\nexport default Connect(mapStateToProps)(Sidebar);","import React from 'react'\nimport { Chart } from \"react-google-charts\";\nimport \"./chart.css\"\n\nconst ExampleChart = () => {\n\n    return (\n        <div className=\"chart\">\n            <Chart\n                chartType=\"ScatterChart\"\n                spreadSheetUrl=\"https://docs.google.com/spreadsheets/d/1jN0iw0usssnsG1_oi-NXtuKfsUsGme09GsFidbqxFYA/edit#gid=0\"\n                options={{\n                    hAxis: {\n                        format: 'short',\n                    },\n                    vAxis: {\n                        format: 'decimal',\n                        // format:'scientific'\n                        // format:'long'\n                        // format:'percent'\n                    },\n                }}\n                rootProps={{ 'data-testid': '1' }}\n            />\n        </div>\n    );\n};\nexport default ExampleChart;","import React, { useState } from 'react'\nimport Nav from '../nav/Nav';\nimport Sidebar from '../sidebar/Sidebar'\nimport ExampleChart from '../charts/ChartOne'\nimport Connect from '../../store/config/connect';\nimport './home.css'\n\nconst Home = (props) => {\n    const [isToggled, setToggled] = useState(false);\n\n    return (\n        <React.Fragment>\n            <Nav isToggled={isToggled} setToggled={setToggled} />\n            <div className={`${props.theme === 'light' ? '' : 'change-colour'}`} >\n                <div className=\"wrapper\">\n                    <div className=\"container is-fluid\">\n                        <div className=\"row\">\n                            <Sidebar isToggled={isToggled} setToggled={setToggled} />\n\n                            <div className=\"content col\">\n                                <h1>This month</h1>\n                                <ExampleChart />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = ({ helper }, props) => {\n    return {\n        ...props,\n        ...helper\n    };\n};\n\nexport default Connect(mapStateToProps)(Home);","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport Home from '../components/home/Home';\n\nconst Router = () => {\n    return (\n        <HashRouter>\n            <Switch>\n                <Route path=\"/\" exact component={Home} />\n            </Switch>\n        </HashRouter>\n    );\n}\n\nexport default Router;","import React from 'react';\nimport Router from './router/Router';\n\nconst App = () => {\n\n  return (\n    <React.Fragment>\n      <Router />\n    </React.Fragment>\n  )\n}\n\nexport default App;\n","// import { LOGOUT, LOGIN, UNAUTHORIZED } from \"../auth\";\r\n// import { NEW_REMINDER } from '../helper';\r\n\r\nconst middleware = action => next => {\r\n  // if (action.type === UNAUTHORIZED) {\r\n  //   console.log(action);\r\n  // }\r\n\r\n  // if (action.type === LOGOUT) {\r\n  //   console.log(action);\r\n  // }\r\n\r\n  // if (action.type === RESIZE_WINDOW) {\r\n  //   console.log(action);\r\n  // }\r\n\r\n  next(action);\r\n};\r\n\r\nexport default middleware;","import React, { useReducer } from \"react\";\r\nimport Context from \"./config\";\r\nimport helperReducer, { helperStore } from '../helper';\r\nimport middleware from \"./middleware\";\r\n\r\nconst Store = props => {\r\n  const [helperState, helperDispatch] = useReducer(helperReducer, helperStore);\r\n\r\n  const trigglerDispatchs = action => {\r\n    const dispatchs = [helperDispatch];\r\n    for (let i = 0; i < dispatchs.length; i++) {\r\n      dispatchs[i](action);\r\n    }\r\n  };\r\n\r\n  const middlewareContrutor = action => {\r\n    middleware(action)(trigglerDispatchs);\r\n  };\r\n\r\n  const combinedReducers = {\r\n    store: {\r\n      ...helperState,\r\n    },\r\n    dispatch: middlewareContrutor\r\n  };\r\n\r\n  return (\r\n    <Context.Provider value={combinedReducers}>\r\n      {props.children}\r\n    </Context.Provider>\r\n  );\r\n};\r\n\r\nexport default Store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Provider from \"./store/config/provider\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}